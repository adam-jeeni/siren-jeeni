package uk.co.jeeni.siren;

import org.codehaus.jackson.map.ObjectMapper;
import org.junit.Test;

public class SwiberTest {
	
	
	/**
	 * Tests that the same structured JSON as found at Kevin Swiber's GitHub project can be generated by
	 * using the SirenJeeni classes.
	 * 
	 * @see https://github.com/kevinswiber/siren
	 */
	@Test
	public void creatKevinSwiberExampleUsingBaseDomainTest(){
		
		// Create the parent 'Order' entity
		final Entity entity = new Entity(new String[] {"order"}, "http://api.x.io/", "/orders/42");
		
		// Create parent entity properties
		entity.addProperty("orderNumber", 42)
			.addProperty("itemCount", 3)
			.addProperty("status", "pending")
			// Add Sub entity for Collection
			.addSubEntity(new SubEntity(new String[] {"items", "collection"}, "/orders/42/items", new String[] {"/rels/order-items"}));
			
		// Add the 'next' and 'previous' links
		entity.addLink(new Link(new String[] {"previous"}, "/orders/41"))
		.addLink(new Link(new String[] {"next"}, "/orders/43"));
		
		
		// THIS ENTITY DOES NOT KNOW ABOUT THE PARENT DOMAIN
		/* The CustomerInfo Entity */
		SubEntity customerInfo = new SubEntity(new String[] {"info", "customer"}, new String[] {"rels/customer"});
			// Add Customer properties
		customerInfo.addProperty("customerId", "pj123")
			.addProperty("name", "Peter Joseph")
			// Add 'self' link for Customer
			.addLink(new Link("customers/pj123"));
		
		// Add Sub entity for Customer
		entity.addSubEntity(customerInfo);
		
		// Create action link entity and fields
		ActionLink actionLink = new ActionLink("add-item", "Add Item", "orders/42/items", HttpMethod.POST);
		actionLink.setFormType("application/x-www-form-urlencoded")
		.addDataField(new DataField("orderNumber", InputTypes.HIDDEN, "42"))
		.addDataField(new DataField("productCode", InputTypes.TEXT))
		.addDataField(new DataField("quantity", InputTypes.NUMBER));
		
		// Add action to parent entity.
		entity.addAction(actionLink);
		
		// Build and check all links
		entity.buildUrls();
		
		// Output the JSON String
		ObjectMapper mapper = new ObjectMapper();
		try {
			System.out.println(mapper.writeValueAsString(entity));
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}
	
	/**
	 * Tests that the same structured JSON as found at Kevin Swiber's GitHub project can be generated by
	 * using the SirenJeeni classes.
	 * 
	 * @see https://github.com/kevinswiber/siren
	 */
	@Test
	public void creatKevinSwiberExampleTest(){
		
		// Create the parent 'Order' entity
		final Entity entity = new Entity(new String[] {"order"}, "http://api.x.io/orders/42");
		
		// Create parent entity properties
		entity.addProperty("orderNumber", 42)
			.addProperty("itemCount", 3)
			.addProperty("status", "pending")
			
			// Add Sub entity for Collection
			.addSubEntity(new SubEntity(new String[] {"items", "collection"}, "http://api.x.io/orders/42/items", new String[] {"http://x.io/rels/order-items"}));
			
			// Add Sub entity for Customer
		SubEntity customerInfo = new SubEntity(new String[] {"info", "customer"}, new String[] {"http://x.io/rels/customer"});
		// Add Customer properties
		customerInfo.addProperty("customerId", "pj123")
				.addProperty("name", "Peter Joseph")
				// Add 'self' link for Customer
				.addLink(new Link("http://api.x.io/customers/pj123"));
			
		// Add Sub entity for Customer
		entity.addSubEntity(customerInfo);
				
		// Create action link entity and fields
		ActionLink action = new ActionLink("add-item", "Add Item", "http://api.x.io/orders/42/items", HttpMethod.POST);
		action.setFormType("application/x-www-form-urlencoded")
			.addDataField(new DataField("orderNumber", InputTypes.HIDDEN, "42"))
			.addDataField(new DataField("productCode", InputTypes.TEXT))
			.addDataField(new DataField("quantity", InputTypes.NUMBER));
		
		// Add action to parent entity.
		entity.addAction(action);
		
		// Add the 'next' and 'previous' links
		entity.addLink(new Link(new String[] {"previous"}, "http://api.x.io/orders/41"))
		.addLink(new Link(new String[] {"next"}, "http://api.x.io/orders/43"));
		
		// Build and check all links
		entity.buildUrls();
		
		// Output the JSON String
		ObjectMapper mapper = new ObjectMapper();
		try {
			System.out.println(mapper.writeValueAsString(entity));
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}

}
